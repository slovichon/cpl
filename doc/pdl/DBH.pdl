<?xml version="1.0" ?>

<library>
	<name>DBH</name>
	<version>1.7</version>
	<description>This library contains utilities to provide an abstracted layer of database connectivity</description>
	<dependencies>
		<dependency>
			<name>CPL</name>
			<version>1.0</version>
		</dependency>
	</dependencies>
	<constants>
		<constant>
			<name>DB_NULL</name>
			<description>
				No data is expected to be returned. In such a query, the number of rows affected by
				the query is returned
			</description>
		</constant>
		<constant>
			<name>DB_COL</name>
			<description>
				A single column from a single result record is expected and will be returned. Subsequent
				columns are rows will be ignored
			</description>
		</constant>
		<constant>
			<name>DB_ROW</name>
			<description>
				A single associatively- and numerically-indexed array representing a result record of
				data is expected and returned from a query. Subsequent result rows are ignored
			</description>
		</constant>
		<constant>
			<name>DB_ROWS</name>
			<description>
				No data is immediately returned. Instead, the result is saved and expected to be used
				multiple times with DBH::fetch_row()
			</description>
		</constant>
		<constant>
			<name>SQL_REG</name>
			<description>
				Regular escaping should be done to safeguard potentially untrusted data into an SQL query
			</description>
		</constant>
		<constant>
			<name>SQL_WILD</name>
			<description>
				Wildcard escaping should be done so wildcard characters in the data do not affect
				wildcard strings the SQL query
			</description>
		</constant>
		<constant>
			<name>SQL_REGEX</name>
			<description>
				Regular-expression escaping should be done so regular-expression metacharacters in the
				data do not affect a regular expression in the SQL query
			</description>
		</constant>
	</constants>
	<classes>
		<class>
			<name>DBH</name>
			<description>
				This class actually does not exist. This is meant as a general guideline for other DBH classes
				to follow yet providing their own compatility towards the RDBMS to which they connect. For
				example, MySQL and PostgreSQL DBH classes could exist providing interfaces to connecting to
				MySQL and PostgreSQL databases, yet providing a layer of abstraction to try to separate
				RDBMS-specific code.
			</description>
			<properties>
				<property>
					<name>link_id</name>
					<type>int</type>
					<description>Contains the connection identifier to the particular RDBMS server</description>
				</property>
				<property>
					<name>result_id</name>
					<type>int</type>
					<description>Contains the result identifier for the concurrent SQL query</description>
				</property>
			</properties>
			<methods>
				<constructor>
					<arguments>
						<argument>
							<name>host</name>
							<type>string</type>
							<description>Hostname of RDBMS server</description>
						</argument>
						<argument>
							<name>username</name>
							<type>string</type>
							<description>Username in which to log in </description>
						</argument>
						<argument>
							<name>password</name>
							<type>string</type>
							<description>Password in which to log in</description>
						</argument>
						<argument>
							<name>database</name>
							<type>string</type>
							<description>First database to use</description>
						</argument>
					</arguments>
					<description>Attempts to connect to RDBMS and select the initial database</description>
				</constructor>
				<method>
					<name>select_database</name>
					<arguments>
						<argument>
							<name>database</name>
							<type>string</type>
							<description>New database name</description>
						</argument>
					</arguments>
					<description>Changes the currently selected database for the connection</description>
				</method>
				<method>
					<name>query</name>
					<arguments>
						<argument>
							<name>sql</name>
							<type>string</type>
							<description>SQL query to be run on the database</description>
						</argument>
						<argument>
							<name>type</name>
							<type>int</type>
							<description>
								Type of return value expected. Use one of DB_NULL,
								DB_COL, DB_ROW, or DB_ROWS for this value
							</description>
						</argument>
					</arguments>
					<description>Run an SQL statement on the RDBMS and possibly gather result data</description>
					<return-value>
						<type>mixed</type>
						<description>
							Depending on the argued type, this can be a variety of values. For DB_NULL,
							the number of rows affected by the particular query are returned. For DB_COL,
							the first column from the first result row from the result returned by the
							SQL query is returned. For DB_ROW, the first row from the result of the SQL
							query is returned in an associatively- and numerically-indexed array. And for
							DB_ROWS, nothing is returned -- to fetch subsequent rows, call
							DBH::fetch_row().
						</description>
					</return-value>
				</method>
				<method>
					<name>last_insert_id</name>
					<description>Returns the unique identifier of the newly-added record</description>
					<return-value>
						<type>int</type>
						<description>The unique identifier of the newly-added record</description>
					</return-value>
				</method>
				<method>
					<name>num_rows</name>
					<description>Get the total number of result rows returned by an SQL query</description>
					<return-value>
						<type>int</type>
						<description>The total number of result rows</description>
					</return-value>
				</method>
				<method>
					<name>fetch_row</name>
					<description>Fetches the next result row from a result</description>
					<return-value>
						<type>array</type>
						<description>
							The associatively- and numerically-indexed array of the next result row
							from an SQL query
						</description>
					</return-value>
				</method>
				<method>
					<name>disconnect</name>
					<description>Disconnect from an RDBMS </description>
				</method>
				<method>
					<name>handle_error</name>
					<arguments>
						<argument>
							<name>msg</name>
							<type>string</type>
							<description>A descriptive error message</description>
						</argument>
					</arguments>
					<description>
						Throws an error. For the most part, this function is and should just be used
						internally as it provides extra RDBMS-related information
					</description>
				</method>
				<method>
					<name>prepare_str</name>
					<arguments>
						<argument>
							<name>str</name>
							<type>string</type>
							<description>The string to be safeguarded</description>
						</argument>
						<argument>
							<name>type</name>
							<type>int</type>
							<description>
								The type of preparation that should be performed on the string.
								Use one of SQL_REG, SQL_WILD, or SQL_REGEX
							</description>
						</argument>
					</arguments>
					<description>
						Prepare a string to be entered into an SQL query. This function safeguards
						potentially untrusted input allowing it to be suitable to be entered into a
						database without any harmful side effects. However, as logically suspected,
						this is not a cure-all for any security-related issue and should be used
						to provide an additional layer of security to an application.
	
						If SQL_REG is used, regular escaping shall be done on the target string. If
						SQL_WILD is used, wildcard-escaping shall be done on the target string. If
						SQL_REGEX is used, regular-expression escaping shall be done on the target
						string.
					</description>
					<return-value>
						<type>string</type>
						<description>The prepared string, ready for SQL query deployment</description>
					</return-value>
				</method>
			</methods>
		</class>
	</classes>
</library>
