<?xml version="1.0" ?>
<!-- $Id$ -->

<lib>
	<name>RGB</name>
	<desc>
		This library contains utilities for easy color and representations
		of color manipulation.
	</desc>
	<classes>
		<class>
			<name>RGB</name>
			<desc>A class for easy manipulation of RGB values and colors</desc>
			<methods>
				<ctor>
					<args>
						<arg>
							<name>colors</name>
							<type>array</type>
							<desc>
								An array with keys "red", "green", and "blue" with
								values as corresponding 0-255 color values, an array
								with keys "r", "g", and "b" with values as
								corresponding 0-255 color values, or an array with
								the indexes 0, 1, and 2 with the corresponding red,
								green, and blue 0-255 color values.
							</desc>
						</arg>
					</args>
					<desc>
						Creates a new RGB object with the specified red, green, and blue
						colors values
					</desc>
				</ctor>
				<ctor>
					<args>
						<arg>
							<name>hex</name>
							<type>string</type>
							<desc>
								The hexadecimal string of red, green, and blue
								color values
							</desc>
						</arg>
					</args>
					<desc>
						Create a new RGB object based on a hexadecimal string of red,
						green, and blue color values
					</desc>
				</ctor>
				<ctor>
					<args>
						<arg>
							<name>red</name>
							<type>int</type>
							<desc>
								The red component, a number between 0 and 255,
								of a color value
							</desc>
						</arg>
						<arg>
							<name>green</name>
							<type>int</type>
							<desc>
								The green component, a number between 0 and 255,
								of a color value
							</desc>
						</arg>
						<arg>
							<name>blue</name>
							<type>int</type>
							<desc>
								The blue component, a number between 0 and 255,
								of a color value
							</desc>
						</arg>
					</args>
					<desc>
						Create a new RGB object based on the red, green, and blue
						components of a color value
					</desc>
				</ctor>
				<ctor>
					<args>
						<arg>
							<name>value</name>
							<type>int</type>
							<desc>
								The long format of a color value, that is, the
								red component, a number between 0 and 255,
								multiplied by 255<sup>2</sup> added to the green
								component, a number between 0 and 255, multiplied
								by 255<sup>1</sup>, added to the blue component,
								a number between 0 and 255, multiplied by
								255<sup>0</sup>
							</desc>
						</arg>
					</args>
					<desc>
						Create a new RGB object based on the long format of a color value
					</desc>
				</ctor>
				<method>
					<name>fix</name>
					<desc>
						This method is primarily used internally by the RGB class
						to rearrange and validate the various color components of the
						concurrent color value. Since this method is called before
						any important calculations are done, you should never need to call
						it yourself
					</desc>
				</method>
				<method>
					<name>to_hex</name>
					<desc>
						Get the hexadecimal string for a color value
					</desc>
					<retval>
						<type>string</type>
						<desc>
							A string consisting of characters from the sequence
							'0' through '9' and 'A' through 'F' describing in base-16
							a color value
							</desc>
					</retval>
				</method>
				<method>
					<name>load_hex</name>
					<args>
						<arg>
							<name>hex</name>
							<type>string</type>
							<desc>
								A string containing the red, green, and blue
								components of a color value, for example,
								&quot;FFFFFF&quot;
							</desc>
						</arg>
					</args>
					<desc>
						Set the color value of an RGB object from a hexadecimal string
					</desc>
					<retval>
						<type>bool</type>
						<desc>
							This value indicates whether the color value could be
							determined from the given hexadecimal string and loaded
							into the RGB object's color value
						</desc>
					</retval>
				</method>
				<method>
					<name>load_hex</name>
					<args>
						<arg>
							<name>red</name>
							<type>string</type>
							<desc>
								A string containing the red component in base-16
								format for a color value
							</desc>
						</arg>
						<arg>
							<name>green</name>
							<type>string</type>
							<desc>
								A string containing the green component in base-16
								format for a color value
							</desc>
						</arg>
						<arg>
							<name>blue</name>
							<type>string</type>
							<desc>
								A string containing the blue component in base-16
								format for a color value
							</desc>
						</arg>
					</args>
					<desc>
						Set the color value of an RGB object from a hexadecimal string
					</desc>
					<retval>
						<type>bool</type>
						<desc>
							This value indicates whether the color value could be
							determined from the given red, green, and blue hexadecimal
							strings and loaded into the RGB object's color value
						</desc>
					</retval>
				</method>
				<method>
					<name>load_true_hex</name>
					<args>
						<arg>
							<name>hex</name>
							<type>int</type>
							<desc>
								The long format of a color value
							</desc>
						</arg>
					</args>
					<desc>
						Note: this method is an alias for RGB::load_long().

						Loads a color value into an RGB object from the long representation
						of a color
					</desc>
				</method>
				<method>
					<name>to_long</name>
					<desc>
						Get the long representation of an RGB object's color value
					</desc>
					<retval>
						<type>int</type>
						<desc>
							The long representation of a color value, or the red
							component, a number between 0 and 255, multiplied by
							255<sup>2</sup>, added to the green component, a number
							between 0 and 255<sup>1</sup>, added to the blue
							component, a number between 0 and 255, multiplied by
							255<sup>0</sup>
						</desc>
					</retval>
				</method>
				<method>
					<name>load_long</name>
					<args>
						<arg>
							<name>value</name>
							<type>int</type>
							<desc>
								The long representation of a color value, that is,
								the red component, a number between 0 and 255,
								multiplied by 255<sup>2</sup>, added to the green
								component, a number between 0 and 255<sup>1</sup>,
								added to the bluecomponent, a number between 0 and
								255, multiplied by 255<sup>0</sup>
							</desc>
						</arg>
					</args>
					<desc>
						Sets the color value of an RGB object from the long representation
						of a color value
					</desc>
				</method>
				<method>
					<name>to_num</name>
					<desc>
						Get the red, green, and blue components, that is, numbers between
						0 and 255 for each component, of the current color value of an
						RGB object
					</desc>
					<retval>
						<type>array</type>
						<desc>
							An array with indicies 0, 1, and 2 pointing respectively
							to the red, green, and blue components of a color value
						</desc>
					</retval>
				</method>
				<method>
					<name>load_num</name>
					<args>
						<arg>
							<name>red</name>
							<type>int</type>
							<desc>
								The red component, a number between 0 and 255, of
								a color value
							</desc>
						</arg>
						<arg>
							<name>green</name>
							<type>int</type>
							<desc>
								The green component, a number between 0 and 255, of
								a color value
							</desc>
						</arg>
						<arg>
							<name>blue</name>
							<type>int</type>
							<desc>
								The blue component, a number between 0 and 255, of
								a color value
							</desc>
						</arg>
					</args>
					<desc>
						Sets the value of an RGB object from the red, green, and blue
						components of a color value
					</desc>
				</method>
				<method>
					<name>to_name</name>
					<desc>
						Grabs the logical color name for the color value of an RGB
						object, if applicable
					</desc>
					<retval>
						<type>string</type>
						<desc>
							The logical color name of a color value
						</desc>
					</retval>
				</method>
				<method>
					<name>load_name</name>
					<args>
						<arg>
							<name>color</name>
							<type>string</type>
							<desc>
								The logical color name of a color value
							</desc>
						</arg>
					</args>
					<desc>
						This method sets the color value of an RGB object from the color's
						logical color name, such as &quot;black&quot; or &quot;red&quot;
					</desc>
					<retval>
						<type>boolean</type>
						<desc>
							Returns true if the logical color name could have its
							corresponding color value loaded into the RGB object
						</desc>
					</retval>
				</method>
			</methods>
		</class>
	</classes>
</lib>
